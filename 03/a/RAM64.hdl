// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
	DMux8Way(in = load, sel = address[3..5], a = LoadRAM0, b = LoadRAM1, 
	c = LoadRAM2, d = LoadRAM3, e = LoadRAM4, f = LoadRAM5, g = LoadRAM6, h = LoadRAM7);
    RAM8(in = in, load = LoadRAM0, address = address[0..2], out = OutRAM0);
	RAM8(in = in, load = LoadRAM1, address = address[0..2], out = OutRAM1);
	RAM8(in = in, load = LoadRAM2, address = address[0..2], out = OutRAM2);
	RAM8(in = in, load = LoadRAM3, address = address[0..2], out = OutRAM3);
	RAM8(in = in, load = LoadRAM4, address = address[0..2], out = OutRAM4);
	RAM8(in = in, load = LoadRAM5, address = address[0..2], out = OutRAM5);
	RAM8(in = in, load = LoadRAM6, address = address[0..2], out = OutRAM6);
	RAM8(in = in, load = LoadRAM7, address = address[0..2], out = OutRAM7);
	Mux8Way16(a = OutRAM0, b = OutRAM1, c = OutRAM2, d = OutRAM3, e = OutRAM4, 
	f = OutRAM5, g = OutRAM6, h = OutRAM7, sel = address[3..5], out = out);
}